using UIToolkitBinding.Core;

namespace UIToolkitBinding.CodeEmitters;

internal sealed class CodeEmitter_UITKDataSourceObject : CodeEmitter
{
    public static string GetFileName(UITKDataSourceObjectContext context)
    {
        TempBuffer.Clear();
        if (context.Parents.Length > 0)
        {
            foreach (var parent in context.Parents)
            {
                TempBuffer.Append(parent.ClassName);
                TempBuffer.Append('.');
            }
        }
        TempBuffer.Append($"{context.ClassName}");
        var result = TempBuffer.ToString();
        return result;
    }

    public static string Generate(UITKDataSourceObjectContext context)
    {
        Buffer.Clear();
        Buffer.AppendLine($$"""
// <auto-generated />
#pragma warning disable
#nullable enable

using System;
using System.Collections.Generic;
using UIToolkitBinding;
using Unity.Properties;
using UnityEngine;
using UnityEngine.UIElements;

""");
        if (!string.IsNullOrEmpty(context.Namespace))
        {
            Buffer.AppendLine($$"""
namespace {{context.Namespace}}
{
""");
        }
        foreach (var parent in context.Parents)
        {
            Buffer.AppendLine($$"""
partial {{parent.TypeDeclarationKeyword}} {{parent.ClassName}}
{
""");
        }
        Buffer.AppendLine($$"""
partial {{context.TypeDeclarationKeyword}} {{context.ClassName}} : INotifyBindablePropertyChanged
{
""");
        if (!context.IsDerivedUITKDataSourceObjectClass && !context.HasInterfaceImplemented)
        {
            Buffer.AppendLine("    public event EventHandler<BindablePropertyChangedEventArgs>? propertyChanged;");
            Buffer.AppendLine();
        }
        Buffer.AppendLine(AppendProperties(context));
        if (!context.IsDerivedUITKDataSourceObjectClass)
        {
            Buffer.AppendLine($$"""
    protected void NotifyPropertyChanged(BindablePropertyChangedEventArgs e)
    {
        propertyChanged?.Invoke(this, e);
    }

    protected bool SetProperty<T>(ref T field, in T value, in BindablePropertyChangedEventArgs eventArgs)
    {
        if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(field, value)) return false;

        field = value;
        propertyChanged?.Invoke(this, eventArgs);
        return true;
    }

""");
        }
        Buffer.AppendLine(AppendOnPropertyChangeMethods(context));
        Buffer.AppendLine($$"""
}
""");
        foreach (var _ in context.Parents)
        {
            Buffer.AppendLine($$"""
}
""");
        }
        if (!string.IsNullOrEmpty(context.Namespace))
        {
            Buffer.Append("""
}
""");
        }
        var result = Buffer.ToString();
        Buffer.Clear();
        return result;
    }

    static string AppendProperties(UITKDataSourceObjectContext context)
    {
        TempBuffer.Clear();
        for (int i = 0; i < context.Members.Length; i++)
        {
            var member = context.Members[i];
            var oldValueExpression = member.IsOldPropertyValueDirectlyReferenced ? "__oldValue" : "default";
            TempBuffer.AppendLine($$"""
    [CreateProperty]
    {{member.DeclaredAccessibility.ToKeyword()}} {{member.Type}} {{member.PropertyName}}
    {
        get => {{member.GetFieldExpressionInGetAccessor()}};
        {{member.SetterAccessibility.ToSetterAccessorDeclaration()}}
        {
            if (global::System.Collections.Generic.EqualityComparer<{{member.Type}}>.Default.Equals({{member.GetFieldExpressionInSetAccessor()}}, value)) return;
""");
            if (member.IsOldPropertyValueDirectlyReferenced) TempBuffer.AppendLine($$"""
            {{member.Type}} {{oldValueExpression}} = {{member.GetFieldExpressionInSetAccessor()}};
""");
            TempBuffer.AppendLine($$"""
            On{{member.PropertyName}}Changing();
            On{{member.PropertyName}}Changing(value);
            On{{member.PropertyName}}Changing({{oldValueExpression}}, value);
            {{member.GetFieldExpressionInSetAccessor()}} = value;
            On{{member.PropertyName}}Changed();
            On{{member.PropertyName}}Changed(value);
            On{{member.PropertyName}}Changed({{oldValueExpression}}, value);
            {{NotifyPropertyChanged(member, context.IsDerivedUITKDataSourceObjectClass)}}
        }
    }
""");
            if (i != context.Members.Length - 1) TempBuffer.AppendLine();
        }

        var result = TempBuffer.ToString();
        TempBuffer.Clear();
        return result;

        static string NotifyPropertyChanged(UITKBindableMemberContext member, bool isInherited)
        {
            if (isInherited) return $"NotifyPropertyChanged(GeneratedEventArgsCache.{member.PropertyName});";
            return $"propertyChanged?.Invoke(this, GeneratedEventArgsCache.{member.PropertyName});";
        }
    }
    static string AppendOnPropertyChangeMethods(UITKDataSourceObjectContext context)
    {
        TempBuffer.Clear();
        foreach (var member in context.Members)
        {
            TempBuffer.AppendLine($"""
    partial void On{member.PropertyName}Changing();
    partial void On{member.PropertyName}Changing({member.Type} newValue);
    partial void On{member.PropertyName}Changing({member.Type} oldValue, {member.Type} newValue);
    partial void On{member.PropertyName}Changed();
    partial void On{member.PropertyName}Changed({member.Type} newValue);
    partial void On{member.PropertyName}Changed({member.Type} oldValue, {member.Type} newValue);
""");
        }
        var result = TempBuffer.ToString();
        TempBuffer.Clear();
        return result;
    }
}
